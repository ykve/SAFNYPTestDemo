// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Error

typedef GPB_ENUM(Error) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Error_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 成功 */
  Error_Success = 0,

  /** 内部错误 */
  Error_InternalError = 1,

  /** 服务繁忙 */
  Error_ServerBusy = 2,

  /** 超时处理 */
  Error_TimeOut = 3,

  /** Token无效 */
  Error_TokenInvalid = 4,

  /** Token过期 */
  Error_TokenExpired = 5,

  /** Json解析错误 */
  Error_UnmarshalError = 6,

  /** 文本不能超过200字节 */
  Error_TextCannotExceed200Bytes = 700212,

  /** 消息频繁 */
  Error_FrequentMessage = 70213,

  /** 操作者不存在 */
  Error_SessionOperatorNotExist = 700601,

  /** 会话参与者不存在 */
  Error_SessionParticipantNotExist = 700602,

  /** 会话参与者超出限制 */
  Error_SessionParticipantOverLimit = 700603,

  /** 会话参与者为空 */
  Error_SessionParticipantIsEmpty = 700604,

  /** 操作者不是群的创建者 */
  Error_SessionOperatorNotGroupOwner = 700605,

  /** 不能删除会话创建者 */
  Error_SessionCantRemoveOwner = 700606,

  /** 服务内部Session失败，通过是ypdata的错误 */
  Error_SessionInternalErr = 700607,

  /** Session不存在 */
  Error_SessionNotExits = 700608,

  /** 指定的接收者未激活 */
  Error_RecvierUnActive = 700501,

  /** 查询用户是否激活发生错误 */
  Error_QueryActFailed = 700502,

  /** 读取Session公共信息发生错误 */
  Error_ErrGetCommSsn = 700503,

  /** 读取用户Session信息发生错误 */
  Error_ErrGetUserSsn = 700504,

  /** 指定的会话(公共)不存在 */
  Error_CommSsnNotExist = 700505,

  /** 指定的会话(user)不存在 */
  Error_UserSsnNotExist = 700506,

  /** 创建会话发生错误 */
  Error_ErrCreateSession = 700507,

  /** 不能讲话 */
  Error_NoSpeak = 700508,

  /** 不能发红包 */
  Error_NoSendRedPacket = 700509,

  /** 没有发送者 */
  Error_NotSender = 700510,

  /** 不能删除消息 */
  Error_NotDelMsg = 700511,

  /** 不能空消息 */
  Error_NotEmpty = 700512,

  /** 不能和客服讲话 */
  Error_NoSpeakKefu = 700513,
};

GPBEnumDescriptor *Error_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Error_IsValidValue(int32_t value);

#pragma mark - ErrorRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ErrorRoot : GPBRootObject
@end

#pragma mark - ErrInfo

typedef GPB_ENUM(ErrInfo_FieldNumber) {
  ErrInfo_FieldNumber_Code = 1,
  ErrInfo_FieldNumber_Msg = 2,
};

/**
 * 返回信息
 **/
@interface ErrInfo : GPBMessage

/** 0 成功，非0失败 */
@property(nonatomic, readwrite) Error code;

/** 错误描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *msg;

@end

/**
 * Fetches the raw value of a @c ErrInfo's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ErrInfo_Code_RawValue(ErrInfo *message);
/**
 * Sets the raw value of an @c ErrInfo's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetErrInfo_Code_RawValue(ErrInfo *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
