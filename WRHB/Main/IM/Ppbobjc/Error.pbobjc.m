// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Error.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ErrorRoot

@implementation ErrorRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ErrorRoot_FileDescriptor

static GPBFileDescriptor *ErrorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fpb"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Error

GPBEnumDescriptor *Error_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000InternalError\000ServerBusy\000TimeOut"
        "\000TokenInvalid\000TokenExpired\000UnmarshalErro"
        "r\000TextCannotExceed200Bytes\000FrequentMessa"
        "ge\000SessionOperatorNotExist\000SessionPartic"
        "ipantNotExist\000SessionParticipantOverLimi"
        "t\000SessionParticipantIsEmpty\000SessionOpera"
        "torNotGroupOwner\000SessionCantRemoveOwner\000"
        "SessionInternalErr\000SessionNotExits\000Recvi"
        "erUnActive\000QueryActFailed\000ErrGetCommSsn\000"
        "ErrGetUserSsn\000CommSsnNotExist\000UserSsnNot"
        "Exist\000ErrCreateSession\000NoSpeak\000NoSendRed"
        "Packet\000NotSender\000NotDelMsg\000NotEmpty\000NoSp"
        "eakKefu\000SelfNoSpeak\000SessionNoSpeak\000";
    static const int32_t values[] = {
        Error_Success,
        Error_InternalError,
        Error_ServerBusy,
        Error_TimeOut,
        Error_TokenInvalid,
        Error_TokenExpired,
        Error_UnmarshalError,
        Error_TextCannotExceed200Bytes,
        Error_FrequentMessage,
        Error_SessionOperatorNotExist,
        Error_SessionParticipantNotExist,
        Error_SessionParticipantOverLimit,
        Error_SessionParticipantIsEmpty,
        Error_SessionOperatorNotGroupOwner,
        Error_SessionCantRemoveOwner,
        Error_SessionInternalErr,
        Error_SessionNotExits,
        Error_RecvierUnActive,
        Error_QueryActFailed,
        Error_ErrGetCommSsn,
        Error_ErrGetUserSsn,
        Error_CommSsnNotExist,
        Error_UserSsnNotExist,
        Error_ErrCreateSession,
        Error_NoSpeak,
        Error_NoSendRedPacket,
        Error_NotSender,
        Error_NotDelMsg,
        Error_NotEmpty,
        Error_NoSpeakKefu,
        Error_SelfNoSpeak,
        Error_SessionNoSpeak,
    };
    static const char *extraTextFormatInfo = " \000\007\000\001\r\000\002\n\000\003\007\000\004\014\000\005\014\000\006\016\000\007\030\000\010\017\000\t\027\000\n\032\000\013\033\000\014\031\000\r\034\000\016\026\000\017\022\000\020\017\000\021\017\000\022\016\000\023\r\000\024\r\000\025\017\000\026\017\000\027\020\000\030\007\000\031\017\000\032\t\000\033\t\000\034\010\000\035\013\000\036\013\000\037\016\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Error)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Error_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Error_IsValidValue(int32_t value__) {
  switch (value__) {
    case Error_Success:
    case Error_InternalError:
    case Error_ServerBusy:
    case Error_TimeOut:
    case Error_TokenInvalid:
    case Error_TokenExpired:
    case Error_UnmarshalError:
    case Error_TextCannotExceed200Bytes:
    case Error_FrequentMessage:
    case Error_SessionOperatorNotExist:
    case Error_SessionParticipantNotExist:
    case Error_SessionParticipantOverLimit:
    case Error_SessionParticipantIsEmpty:
    case Error_SessionOperatorNotGroupOwner:
    case Error_SessionCantRemoveOwner:
    case Error_SessionInternalErr:
    case Error_SessionNotExits:
    case Error_RecvierUnActive:
    case Error_QueryActFailed:
    case Error_ErrGetCommSsn:
    case Error_ErrGetUserSsn:
    case Error_CommSsnNotExist:
    case Error_UserSsnNotExist:
    case Error_ErrCreateSession:
    case Error_NoSpeak:
    case Error_NoSendRedPacket:
    case Error_NotSender:
    case Error_NotDelMsg:
    case Error_NotEmpty:
    case Error_NoSpeakKefu:
    case Error_SelfNoSpeak:
    case Error_SessionNoSpeak:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ErrInfo

@implementation ErrInfo

@dynamic code;
@dynamic msg;

typedef struct ErrInfo__storage_ {
  uint32_t _has_storage_[1];
  Error code;
  NSString *msg;
} ErrInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = ErrInfo_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ErrInfo__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = ErrInfo_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ErrInfo__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrInfo class]
                                     rootClass:[ErrorRoot class]
                                          file:ErrorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ErrInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ErrInfo_Code_RawValue(ErrInfo *message) {
  GPBDescriptor *descriptor = [ErrInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ErrInfo_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetErrInfo_Code_RawValue(ErrInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [ErrInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ErrInfo_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
