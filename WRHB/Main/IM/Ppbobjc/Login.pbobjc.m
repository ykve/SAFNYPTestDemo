// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Login.pbobjc.h"
#import "Error.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LoginRoot

@implementation LoginRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LoginRoot_FileDescriptor

static GPBFileDescriptor *LoginRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fpb"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum UserType

GPBEnumDescriptor *UserType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UtNone\000UtKefu\000UtSuperKefu\000UtAdmin\000UtBusA"
        "dmin\000UtBusAdminKefu\000UtOther\000";
    static const int32_t values[] = {
        UserType_UtNone,
        UserType_UtKefu,
        UserType_UtSuperKefu,
        UserType_UtAdmin,
        UserType_UtBusAdmin,
        UserType_UtBusAdminKefu,
        UserType_UtOther,
    };
    static const char *extraTextFormatInfo = "\007\000\006\000\001\006\000\002\013\000\003\007\000\004\n\000\005\016\000\006\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserType_UtNone:
    case UserType_UtKefu:
    case UserType_UtSuperKefu:
    case UserType_UtAdmin:
    case UserType_UtBusAdmin:
    case UserType_UtBusAdminKefu:
    case UserType_UtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CLogin

@implementation CLogin

@dynamic userId;
@dynamic HTTPToken;
@dynamic deviceType;
@dynamic userType;

typedef struct CLogin__storage_ {
  uint32_t _has_storage_[1];
  CLogin_DeviceType deviceType;
  UserType userType;
  NSString *HTTPToken;
  uint64_t userId;
} CLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CLogin_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CLogin__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "HTTPToken",
        .dataTypeSpecific.className = NULL,
        .number = CLogin_FieldNumber_HTTPToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CLogin__storage_, HTTPToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = CLogin_DeviceType_EnumDescriptor,
        .number = CLogin_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CLogin__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = UserType_EnumDescriptor,
        .number = CLogin_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CLogin__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CLogin class]
                                     rootClass:[LoginRoot class]
                                          file:LoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CLogin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!!\245\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CLogin_DeviceType_RawValue(CLogin *message) {
  GPBDescriptor *descriptor = [CLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CLogin_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetCLogin_DeviceType_RawValue(CLogin *message, int32_t value) {
  GPBDescriptor *descriptor = [CLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CLogin_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t CLogin_UserType_RawValue(CLogin *message) {
  GPBDescriptor *descriptor = [CLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CLogin_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetCLogin_UserType_RawValue(CLogin *message, int32_t value) {
  GPBDescriptor *descriptor = [CLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CLogin_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CLogin_DeviceType

GPBEnumDescriptor *CLogin_DeviceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Android\000Ios\000Web\000";
    static const int32_t values[] = {
        CLogin_DeviceType_None,
        CLogin_DeviceType_Android,
        CLogin_DeviceType_Ios,
        CLogin_DeviceType_Web,
    };
    static const char *extraTextFormatInfo = "\003\000\004\000\001\007\000\003\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CLogin_DeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CLogin_DeviceType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CLogin_DeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CLogin_DeviceType_None:
    case CLogin_DeviceType_Android:
    case CLogin_DeviceType_Ios:
    case CLogin_DeviceType_Web:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SLogin

@implementation SLogin

@dynamic result;
@dynamic errMsg;

typedef struct SLogin__storage_ {
  uint32_t _has_storage_[1];
  Error result;
  NSString *errMsg;
} SLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = SLogin_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SLogin__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "errMsg",
        .dataTypeSpecific.className = NULL,
        .number = SLogin_FieldNumber_ErrMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SLogin__storage_, errMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SLogin class]
                                     rootClass:[LoginRoot class]
                                          file:LoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SLogin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SLogin_Result_RawValue(SLogin *message) {
  GPBDescriptor *descriptor = [SLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SLogin_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSLogin_Result_RawValue(SLogin *message, int32_t value) {
  GPBDescriptor *descriptor = [SLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SLogin_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SKickOut

@implementation SKickOut

@dynamic userId;
@dynamic type;
@dynamic msg;

typedef struct SKickOut__storage_ {
  uint32_t _has_storage_[1];
  SKickOut_Type type;
  NSString *msg;
  uint64_t userId;
} SKickOut__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SKickOut_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SKickOut__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SKickOut_Type_EnumDescriptor,
        .number = SKickOut_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SKickOut__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = SKickOut_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SKickOut__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SKickOut class]
                                     rootClass:[LoginRoot class]
                                          file:LoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SKickOut__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SKickOut_Type_RawValue(SKickOut *message) {
  GPBDescriptor *descriptor = [SKickOut descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SKickOut_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetSKickOut_Type_RawValue(SKickOut *message, int32_t value) {
  GPBDescriptor *descriptor = [SKickOut descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SKickOut_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum SKickOut_Type

GPBEnumDescriptor *SKickOut_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ReLogin\000System\000SameIpLimit\000";
    static const int32_t values[] = {
        SKickOut_Type_ReLogin,
        SKickOut_Type_System,
        SKickOut_Type_SameIpLimit,
    };
    static const char *extraTextFormatInfo = "\003\000\007\000\001\006\000\002\013\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SKickOut_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SKickOut_Type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SKickOut_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case SKickOut_Type_ReLogin:
    case SKickOut_Type_System:
    case SKickOut_Type_SameIpLimit:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
