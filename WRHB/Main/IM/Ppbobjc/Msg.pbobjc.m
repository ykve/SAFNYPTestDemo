// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Msg.pbobjc.h"
#import "Error.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MsgRoot

@implementation MsgRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MsgRoot_FileDescriptor

static GPBFileDescriptor *MsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fpb"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SegmentType

GPBEnumDescriptor *SegmentType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SegmentTypeFont\000SegmentTypeText\000SegmentT"
        "ypeHtml\000SegmentTypeEmoji\000SegmentTypeLink"
        "\000SegmentTypeFile\000SegmentTypeImage\000Segmen"
        "tTypeAudio\000SegmentTypeNofitiction\000Segmen"
        "tTypeSendRedpacket\000SegmentTypeSettleRedp"
        "acket\000SegmentTypeSingleSettleRedpacket\000S"
        "egmentTypeRedpacketStatus\000SegmentTypeVid"
        "eo\000SegmentTypeFastReply\000SegmentTypeAutoR"
        "eply\000SegmentTypeSendTransfer\000";
    static const int32_t values[] = {
        SegmentType_SegmentTypeFont,
        SegmentType_SegmentTypeText,
        SegmentType_SegmentTypeHtml,
        SegmentType_SegmentTypeEmoji,
        SegmentType_SegmentTypeLink,
        SegmentType_SegmentTypeFile,
        SegmentType_SegmentTypeImage,
        SegmentType_SegmentTypeAudio,
        SegmentType_SegmentTypeNofitiction,
        SegmentType_SegmentTypeSendRedpacket,
        SegmentType_SegmentTypeSettleRedpacket,
        SegmentType_SegmentTypeSingleSettleRedpacket,
        SegmentType_SegmentTypeRedpacketStatus,
        SegmentType_SegmentTypeVideo,
        SegmentType_SegmentTypeFastReply,
        SegmentType_SegmentTypeAutoReply,
        SegmentType_SegmentTypeSendTransfer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SegmentType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SegmentType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SegmentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SegmentType_SegmentTypeFont:
    case SegmentType_SegmentTypeText:
    case SegmentType_SegmentTypeHtml:
    case SegmentType_SegmentTypeEmoji:
    case SegmentType_SegmentTypeLink:
    case SegmentType_SegmentTypeFile:
    case SegmentType_SegmentTypeImage:
    case SegmentType_SegmentTypeAudio:
    case SegmentType_SegmentTypeNofitiction:
    case SegmentType_SegmentTypeSendRedpacket:
    case SegmentType_SegmentTypeSettleRedpacket:
    case SegmentType_SegmentTypeSingleSettleRedpacket:
    case SegmentType_SegmentTypeRedpacketStatus:
    case SegmentType_SegmentTypeVideo:
    case SegmentType_SegmentTypeFastReply:
    case SegmentType_SegmentTypeAutoReply:
    case SegmentType_SegmentTypeSendTransfer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SessionType

GPBEnumDescriptor *SessionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Single\000MultiGame\000MultiGeneral\000ClubH"
        "all\000BigAlliance\000SystemRoom\000Kefu\000Business"
        "Kefu\000";
    static const int32_t values[] = {
        SessionType_None,
        SessionType_Single,
        SessionType_MultiGame,
        SessionType_MultiGeneral,
        SessionType_ClubHall,
        SessionType_BigAlliance,
        SessionType_SystemRoom,
        SessionType_Kefu,
        SessionType_BusinessKefu,
    };
    static const char *extraTextFormatInfo = "\t\000\004\000\001\006\000\002\t\000\003\014\000\004\010\000\005\013\000\006\n\000\007\004\000\010\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SessionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SessionType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SessionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SessionType_None:
    case SessionType_Single:
    case SessionType_MultiGame:
    case SessionType_MultiGeneral:
    case SessionType_ClubHall:
    case SessionType_BigAlliance:
    case SessionType_SystemRoom:
    case SessionType_Kefu:
    case SessionType_BusinessKefu:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PlayType

GPBEnumDescriptor *PlayType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PtNone\000PtSingleMime\000PtMultiMime\000PtNnNoTi"
        "mes\000PtNnTimes\000PtGroupNormal\000PtPersonal\000P"
        "tRelay\000PtAlliance\000PtWelfare\000PtLucky\000";
    static const int32_t values[] = {
        PlayType_PtNone,
        PlayType_PtSingleMime,
        PlayType_PtMultiMime,
        PlayType_PtNnNoTimes,
        PlayType_PtNnTimes,
        PlayType_PtGroupNormal,
        PlayType_PtPersonal,
        PlayType_PtRelay,
        PlayType_PtAlliance,
        PlayType_PtWelfare,
        PlayType_PtLucky,
    };
    static const char *extraTextFormatInfo = "\013\000\006\000\001\014\000\002\013\000\003\013\000\004\t\000\005\r\000\006\n\000\007\007\000\010\n\000\t\t\000\n\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlayType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlayType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlayType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlayType_PtNone:
    case PlayType_PtSingleMime:
    case PlayType_PtMultiMime:
    case PlayType_PtNnNoTimes:
    case PlayType_PtNnTimes:
    case PlayType_PtGroupNormal:
    case PlayType_PtPersonal:
    case PlayType_PtRelay:
    case PlayType_PtAlliance:
    case PlayType_PtWelfare:
    case PlayType_PtLucky:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FontSegment

@implementation FontSegment

@dynamic fontName;
@dynamic fontSize;
@dynamic fontColor;
@dynamic fontStyle;

typedef struct FontSegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *fontName;
  NSString *fontColor;
  NSString *fontStyle;
  int64_t fontSize;
} FontSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fontName",
        .dataTypeSpecific.className = NULL,
        .number = FontSegment_FieldNumber_FontName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FontSegment__storage_, fontName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fontSize",
        .dataTypeSpecific.className = NULL,
        .number = FontSegment_FieldNumber_FontSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FontSegment__storage_, fontSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fontColor",
        .dataTypeSpecific.className = NULL,
        .number = FontSegment_FieldNumber_FontColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FontSegment__storage_, fontColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fontStyle",
        .dataTypeSpecific.className = NULL,
        .number = FontSegment_FieldNumber_FontStyle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FontSegment__storage_, fontStyle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FontSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FontSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextSegment

@implementation TextSegment

@dynamic text;

typedef struct TextSegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
} TextSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = TextSegment_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextSegment__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HtmlSegment

@implementation HtmlSegment

@dynamic html;

typedef struct HtmlSegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *html;
} HtmlSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "html",
        .dataTypeSpecific.className = NULL,
        .number = HtmlSegment_FieldNumber_Html,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HtmlSegment__storage_, html),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HtmlSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HtmlSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmojiSegment

@implementation EmojiSegment

@dynamic emoji;

typedef struct EmojiSegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *emoji;
} EmojiSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "emoji",
        .dataTypeSpecific.className = NULL,
        .number = EmojiSegment_FieldNumber_Emoji,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmojiSegment__storage_, emoji),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmojiSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmojiSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkSegment

@implementation LinkSegment

@dynamic linkType;
@dynamic title;
@dynamic URL;

typedef struct LinkSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t linkType;
  NSString *title;
  NSString *URL;
} LinkSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linkType",
        .dataTypeSpecific.className = NULL,
        .number = LinkSegment_FieldNumber_LinkType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkSegment__storage_, linkType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = LinkSegment_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LinkSegment__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = LinkSegment_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LinkSegment__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileSegment

@implementation FileSegment

@dynamic name;
@dynamic size;
@dynamic id_p;
@dynamic URL;

typedef struct FileSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  NSString *name;
  NSString *id_p;
  NSString *URL;
} FileSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FileSegment_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileSegment__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = FileSegment_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileSegment__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FileSegment_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = FileSegment_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FileSegment__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImageSegment

@implementation ImageSegment

@dynamic name;
@dynamic size;
@dynamic id_p;
@dynamic height;
@dynamic width;
@dynamic URL;
@dynamic thumbnail;
@dynamic mimeType;

typedef struct ImageSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int32_t height;
  int32_t width;
  NSString *name;
  NSString *id_p;
  NSString *URL;
  NSData *thumbnail;
  NSString *mimeType;
} ImageSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_Width,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_Thumbnail,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = ImageSegment_FieldNumber_MimeType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ImageSegment__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImageSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioSegment

@implementation AudioSegment

@dynamic name;
@dynamic size;
@dynamic id_p;
@dynamic time;
@dynamic URL;

typedef struct AudioSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int32_t time;
  NSString *name;
  NSString *id_p;
  NSString *URL;
} AudioSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AudioSegment_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioSegment__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = AudioSegment_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioSegment__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AudioSegment_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = AudioSegment_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AudioSegment__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = AudioSegment_FieldNumber_URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AudioSegment__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VideoSegment

@implementation VideoSegment

@dynamic name;
@dynamic size;
@dynamic id_p;
@dynamic time;
@dynamic thumbnail;
@dynamic URL;

typedef struct VideoSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int32_t time;
  NSString *name;
  NSString *id_p;
  NSData *thumbnail;
  NSString *URL;
} VideoSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = VideoSegment_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VideoSegment__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = VideoSegment_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VideoSegment__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = VideoSegment_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VideoSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = VideoSegment_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VideoSegment__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.className = NULL,
        .number = VideoSegment_FieldNumber_Thumbnail,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VideoSegment__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = VideoSegment_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VideoSegment__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendRedPacketSegment

@implementation SendRedPacketSegment

@dynamic id_p;
@dynamic redpacketType;
@dynamic sender;
@dynamic create;
@dynamic expire;
@dynamic mime;
@dynamic title;
@dynamic sendTime;
@dynamic total;
@dynamic remain;

typedef struct SendRedPacketSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t redpacketType;
  int32_t total;
  int32_t remain;
  NSString *id_p;
  NSString *mime;
  NSString *title;
  uint64_t sender;
  int64_t create;
  int64_t expire;
  int64_t sendTime;
} SendRedPacketSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redpacketType",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_RedpacketType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, redpacketType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Sender,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "create",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Create,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, create),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Expire,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, expire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mime",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Mime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, mime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Title,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_SendTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Total,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remain",
        .dataTypeSpecific.className = NULL,
        .number = SendRedPacketSegment_FieldNumber_Remain,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SendRedPacketSegment__storage_, remain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendRedPacketSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendRedPacketSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SettleRedPacketSegment

@implementation SettleRedPacketSegment

@dynamic id_p;
@dynamic type;
@dynamic data_p;
@dynamic receiver;

typedef struct SettleRedPacketSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *id_p;
  NSString *data_p;
  uint64_t receiver;
} SettleRedPacketSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SettleRedPacketSegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SettleRedPacketSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SettleRedPacketSegment_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SettleRedPacketSegment__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = SettleRedPacketSegment_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SettleRedPacketSegment__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiver",
        .dataTypeSpecific.className = NULL,
        .number = SettleRedPacketSegment_FieldNumber_Receiver,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SettleRedPacketSegment__storage_, receiver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SettleRedPacketSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SettleRedPacketSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SingleSettleRedPacketSegment

@implementation SingleSettleRedPacketSegment

@dynamic id_p;
@dynamic sendTime;
@dynamic senderName;
@dynamic grabNum;
@dynamic loseNum;
@dynamic gotMime;
@dynamic receiver;

typedef struct SingleSettleRedPacketSegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *senderName;
  NSString *grabNum;
  NSString *loseNum;
  int64_t sendTime;
  uint64_t receiver;
} SingleSettleRedPacketSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SingleSettleRedPacketSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_SendTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SingleSettleRedPacketSegment__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "senderName",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_SenderName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SingleSettleRedPacketSegment__storage_, senderName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "grabNum",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_GrabNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SingleSettleRedPacketSegment__storage_, grabNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loseNum",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_LoseNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SingleSettleRedPacketSegment__storage_, loseNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gotMime",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_GotMime,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "receiver",
        .dataTypeSpecific.className = NULL,
        .number = SingleSettleRedPacketSegment_FieldNumber_Receiver,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SingleSettleRedPacketSegment__storage_, receiver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SingleSettleRedPacketSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SingleSettleRedPacketSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedPacketStatusSegment

@implementation RedPacketStatusSegment

@dynamic id_p;
@dynamic total;
@dynamic remain;

typedef struct RedPacketStatusSegment__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  int32_t remain;
  NSString *id_p;
} RedPacketStatusSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RedPacketStatusSegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedPacketStatusSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = RedPacketStatusSegment_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedPacketStatusSegment__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remain",
        .dataTypeSpecific.className = NULL,
        .number = RedPacketStatusSegment_FieldNumber_Remain,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedPacketStatusSegment__storage_, remain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedPacketStatusSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedPacketStatusSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FastReplySegment

@implementation FastReplySegment

@dynamic id_p;
@dynamic text;

typedef struct FastReplySegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *text;
} FastReplySegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FastReplySegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FastReplySegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = FastReplySegment_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FastReplySegment__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FastReplySegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FastReplySegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AutoReplySegment

@implementation AutoReplySegment

@dynamic id_p;
@dynamic text;

typedef struct AutoReplySegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *text;
} AutoReplySegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AutoReplySegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AutoReplySegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = AutoReplySegment_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AutoReplySegment__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AutoReplySegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AutoReplySegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendTransferSegment

@implementation SendTransferSegment

@dynamic id_p;
@dynamic sender;
@dynamic create;
@dynamic expire;
@dynamic title;
@dynamic sendTime;
@dynamic total;

typedef struct SendTransferSegment__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *title;
  NSString *total;
  uint64_t sender;
  int64_t create;
  int64_t expire;
  int64_t sendTime;
} SendTransferSegment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_Sender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "create",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_Create,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, create),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_Expire,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, expire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = SendTransferSegment_FieldNumber_Total,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendTransferSegment__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendTransferSegment class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendTransferSegment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Content

@implementation Content

@dynamic segmentType;
@dynamic data_p;

typedef struct Content__storage_ {
  uint32_t _has_storage_[1];
  SegmentType segmentType;
  NSData *data_p;
} Content__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "segmentType",
        .dataTypeSpecific.enumDescFunc = SegmentType_EnumDescriptor,
        .number = Content_FieldNumber_SegmentType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Content__storage_, segmentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Content_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Content__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Content class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Content__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Content_SegmentType_RawValue(Content *message) {
  GPBDescriptor *descriptor = [Content descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Content_FieldNumber_SegmentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetContent_SegmentType_RawValue(Content *message, int32_t value) {
  GPBDescriptor *descriptor = [Content descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Content_FieldNumber_SegmentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CSendMessage

@implementation CSendMessage

@dynamic sessionId;
@dynamic sender;
@dynamic sendTime;
@dynamic hasContent, content;

typedef struct CSendMessage__storage_ {
  uint32_t _has_storage_[1];
  Content *content;
  uint64_t sessionId;
  uint64_t sender;
  int64_t sendTime;
} CSendMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CSendMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CSendMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = NULL,
        .number = CSendMessage_FieldNumber_Sender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CSendMessage__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = CSendMessage_FieldNumber_SendTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CSendMessage__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(Content),
        .number = CSendMessage_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CSendMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CSendMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CSendMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SSendMessage

@implementation SSendMessage

@dynamic result;
@dynamic maxMsgId;
@dynamic sessionId;
@dynamic sendTime;

typedef struct SSendMessage__storage_ {
  uint32_t _has_storage_[1];
  Error result;
  uint64_t maxMsgId;
  uint64_t sessionId;
  int64_t sendTime;
} SSendMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = SSendMessage_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SSendMessage__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "maxMsgId",
        .dataTypeSpecific.className = NULL,
        .number = SSendMessage_FieldNumber_MaxMsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SSendMessage__storage_, maxMsgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = SSendMessage_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SSendMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = SSendMessage_FieldNumber_SendTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SSendMessage__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SSendMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SSendMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SSendMessage_Result_RawValue(SSendMessage *message) {
  GPBDescriptor *descriptor = [SSendMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SSendMessage_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSSendMessage_Result_RawValue(SSendMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [SSendMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SSendMessage_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SNotifyNewMessage

@implementation SNotifyNewMessage

@dynamic msgsArray, msgsArray_Count;

typedef struct SNotifyNewMessage__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
} SNotifyNewMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = SNotifyNewMessage_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SNotifyNewMessage__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNotifyNewMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SNotifyNewMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic sessionId;
@dynamic sessionType;
@dynamic sessionVer;
@dynamic msgId;
@dynamic sender;
@dynamic sendTime;
@dynamic hasContent, content;
@dynamic senderName;
@dynamic senderAvatar;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  int32_t sessionType;
  uint32_t sessionVer;
  Content *content;
  NSString *senderName;
  NSString *senderAvatar;
  uint64_t sessionId;
  uint64_t msgId;
  uint64_t sender;
  int64_t sendTime;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_SessionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, sessionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sessionVer",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_SessionVer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, sessionVer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Message__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Sender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Message__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Message__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(Content),
        .number = Message_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Message__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "senderName",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_SenderName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Message__storage_, senderName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "senderAvatar",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_SenderAvatar,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Message__storage_, senderAvatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CMessageList

@implementation CMessageList

@dynamic sessionId;
@dynamic from;
@dynamic to;

typedef struct CMessageList__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sessionId;
  uint64_t from;
  uint64_t to;
} CMessageList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CMessageList_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CMessageList__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = CMessageList_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CMessageList__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = CMessageList_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CMessageList__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CMessageList class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CMessageList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMessageList

@implementation SMessageList

@dynamic result;
@dynamic msgsArray, msgsArray_Count;

typedef struct SMessageList__storage_ {
  uint32_t _has_storage_[1];
  Error result;
  NSMutableArray *msgsArray;
} SMessageList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = SMessageList_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMessageList__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = SMessageList_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SMessageList__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMessageList class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMessageList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SMessageList_Result_RawValue(SMessageList *message) {
  GPBDescriptor *descriptor = [SMessageList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SMessageList_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSMessageList_Result_RawValue(SMessageList *message, int32_t value) {
  GPBDescriptor *descriptor = [SMessageList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SMessageList_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CUnReadSessionList

@implementation CUnReadSessionList

@dynamic userId;

typedef struct CUnReadSessionList__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userId;
} CUnReadSessionList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CUnReadSessionList_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CUnReadSessionList__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CUnReadSessionList class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CUnReadSessionList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SUnReadSessionList

@implementation SUnReadSessionList

@dynamic result;
@dynamic sessionsArray, sessionsArray_Count;

typedef struct SUnReadSessionList__storage_ {
  uint32_t _has_storage_[1];
  Error result;
  NSMutableArray *sessionsArray;
} SUnReadSessionList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = SUnReadSessionList_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SUnReadSessionList__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sessionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Session),
        .number = SUnReadSessionList_FieldNumber_SessionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SUnReadSessionList__storage_, sessionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SUnReadSessionList class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SUnReadSessionList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SUnReadSessionList_Result_RawValue(SUnReadSessionList *message) {
  GPBDescriptor *descriptor = [SUnReadSessionList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SUnReadSessionList_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSUnReadSessionList_Result_RawValue(SUnReadSessionList *message, int32_t value) {
  GPBDescriptor *descriptor = [SUnReadSessionList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SUnReadSessionList_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Session

@implementation Session

@dynamic sessionId;
@dynamic sessionType;
@dynamic isGroup;
@dynamic maxMsgId;
@dynamic activeTime;
@dynamic sessionVer;
@dynamic title;
@dynamic initiator;
@dynamic lastReadMsgId;
@dynamic firstMsgId;
@dynamic visibility;
@dynamic canSpeak;
@dynamic unReadNum;

typedef struct Session__storage_ {
  uint32_t _has_storage_[1];
  int32_t sessionType;
  int32_t unReadNum;
  NSString *title;
  uint64_t sessionId;
  uint64_t maxMsgId;
  int64_t activeTime;
  uint64_t sessionVer;
  uint64_t initiator;
  uint64_t lastReadMsgId;
  uint64_t firstMsgId;
} Session__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Session__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_SessionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Session__storage_, sessionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isGroup",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_IsGroup,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "maxMsgId",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_MaxMsgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Session__storage_, maxMsgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "activeTime",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_ActiveTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Session__storage_, activeTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sessionVer",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_SessionVer,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Session__storage_, sessionVer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_Title,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Session__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "initiator",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_Initiator,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Session__storage_, initiator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lastReadMsgId",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_LastReadMsgId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Session__storage_, lastReadMsgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "firstMsgId",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_FirstMsgId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Session__storage_, firstMsgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "visibility",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_Visibility,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "canSpeak",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_CanSpeak,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "unReadNum",
        .dataTypeSpecific.className = NULL,
        .number = Session_FieldNumber_UnReadNum,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(Session__storage_, unReadNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Session class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Session__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CMessageLastList

@implementation CMessageLastList

@dynamic sessionId;
@dynamic from;
@dynamic count;

typedef struct CMessageLastList__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  uint64_t sessionId;
  uint64_t from;
} CMessageLastList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CMessageLastList_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CMessageLastList__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = CMessageLastList_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CMessageLastList__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = CMessageLastList_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CMessageLastList__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CMessageLastList class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CMessageLastList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMessageLastList

@implementation SMessageLastList

@dynamic result;
@dynamic msgsArray, msgsArray_Count;

typedef struct SMessageLastList__storage_ {
  uint32_t _has_storage_[1];
  Error result;
  NSMutableArray *msgsArray;
} SMessageLastList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = SMessageLastList_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMessageLastList__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = SMessageLastList_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SMessageLastList__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMessageLastList class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMessageLastList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SMessageLastList_Result_RawValue(SMessageLastList *message) {
  GPBDescriptor *descriptor = [SMessageLastList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SMessageLastList_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSMessageLastList_Result_RawValue(SMessageLastList *message, int32_t value) {
  GPBDescriptor *descriptor = [SMessageLastList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SMessageLastList_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RecvMsg

@implementation RecvMsg

@dynamic sessionId;
@dynamic msgId;

typedef struct RecvMsg__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sessionId;
  uint64_t msgId;
} RecvMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = RecvMsg_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecvMsg__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = RecvMsg_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RecvMsg__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecvMsg class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecvMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CRecvMessage

@implementation CRecvMessage

@dynamic userId;
@dynamic recvMsgArray, recvMsgArray_Count;

typedef struct CRecvMessage__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recvMsgArray;
  uint64_t userId;
} CRecvMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CRecvMessage_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CRecvMessage__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "recvMsgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RecvMsg),
        .number = CRecvMessage_FieldNumber_RecvMsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CRecvMessage__storage_, recvMsgArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CRecvMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CRecvMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000recvMsg\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SRecvMessage

@implementation SRecvMessage

@dynamic userId;
@dynamic recvMsgArray, recvMsgArray_Count;

typedef struct SRecvMessage__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recvMsgArray;
  uint64_t userId;
} SRecvMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SRecvMessage_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SRecvMessage__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "recvMsgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RecvMsg),
        .number = SRecvMessage_FieldNumber_RecvMsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SRecvMessage__storage_, recvMsgArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SRecvMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SRecvMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000recvMsg\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CDelMessage

@implementation CDelMessage

@dynamic sessionId;
@dynamic msgIdArray, msgIdArray_Count;

typedef struct CDelMessage__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *msgIdArray;
  uint64_t sessionId;
} CDelMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CDelMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CDelMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgIdArray",
        .dataTypeSpecific.className = NULL,
        .number = CDelMessage_FieldNumber_MsgIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CDelMessage__storage_, msgIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CDelMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CDelMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SDelMessage

@implementation SDelMessage

@dynamic result;
@dynamic sessionId;
@dynamic msgIdArray, msgIdArray_Count;

typedef struct SDelMessage__storage_ {
  uint32_t _has_storage_[1];
  Error result;
  GPBUInt64Array *msgIdArray;
  uint64_t sessionId;
} SDelMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Error_EnumDescriptor,
        .number = SDelMessage_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SDelMessage__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = SDelMessage_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SDelMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgIdArray",
        .dataTypeSpecific.className = NULL,
        .number = SDelMessage_FieldNumber_MsgIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SDelMessage__storage_, msgIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SDelMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SDelMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SDelMessage_Result_RawValue(SDelMessage *message) {
  GPBDescriptor *descriptor = [SDelMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SDelMessage_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSDelMessage_Result_RawValue(SDelMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [SDelMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SDelMessage_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CDelMessageAck

@implementation CDelMessageAck

@dynamic sessionId;
@dynamic msgIdArray, msgIdArray_Count;

typedef struct CDelMessageAck__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *msgIdArray;
  uint64_t sessionId;
} CDelMessageAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CDelMessageAck_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CDelMessageAck__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgIdArray",
        .dataTypeSpecific.className = NULL,
        .number = CDelMessageAck_FieldNumber_MsgIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CDelMessageAck__storage_, msgIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CDelMessageAck class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CDelMessageAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CInputMessage

@implementation CInputMessage

@dynamic sessionId;

typedef struct CInputMessage__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sessionId;
} CInputMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CInputMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CInputMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CInputMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CInputMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SInputMessage

@implementation SInputMessage

@dynamic sessionId;
@dynamic userId;

typedef struct SInputMessage__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sessionId;
  uint64_t userId;
} SInputMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = SInputMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SInputMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SInputMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SInputMessage__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SInputMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SInputMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReadInfo

@implementation ReadInfo

@dynamic sender;
@dynamic msgId;

typedef struct ReadInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sender;
  uint64_t msgId;
} ReadInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.className = NULL,
        .number = ReadInfo_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReadInfo__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = ReadInfo_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReadInfo__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReadInfo class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReadInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CReadMessage

@implementation CReadMessage

@dynamic sessionId;
@dynamic readInfoArray, readInfoArray_Count;

typedef struct CReadMessage__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *readInfoArray;
  uint64_t sessionId;
} CReadMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CReadMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CReadMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "readInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ReadInfo),
        .number = CReadMessage_FieldNumber_ReadInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CReadMessage__storage_, readInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CReadMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CReadMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SReadMessage

@implementation SReadMessage

@dynamic sessionId;
@dynamic msgIdsArray, msgIdsArray_Count;

typedef struct SReadMessage__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *msgIdsArray;
  uint64_t sessionId;
} SReadMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = SReadMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SReadMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = SReadMessage_FieldNumber_MsgIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SReadMessage__storage_, msgIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SReadMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SReadMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SKefuReadMessage

@implementation SKefuReadMessage

@dynamic sessionId;
@dynamic msgIdsArray, msgIdsArray_Count;
@dynamic kefuId;

typedef struct SKefuReadMessage__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *msgIdsArray;
  uint64_t sessionId;
  uint64_t kefuId;
} SKefuReadMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = SKefuReadMessage_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SKefuReadMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = SKefuReadMessage_FieldNumber_MsgIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SKefuReadMessage__storage_, msgIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "kefuId",
        .dataTypeSpecific.className = NULL,
        .number = SKefuReadMessage_FieldNumber_KefuId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SKefuReadMessage__storage_, kefuId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SKefuReadMessage class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SKefuReadMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CReadMessageAck

@implementation CReadMessageAck

@dynamic sessionId;
@dynamic msgIdsArray, msgIdsArray_Count;

typedef struct CReadMessageAck__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *msgIdsArray;
  uint64_t sessionId;
} CReadMessageAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CReadMessageAck_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CReadMessageAck__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msgIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = CReadMessageAck_FieldNumber_MsgIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CReadMessageAck__storage_, msgIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CReadMessageAck class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CReadMessageAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CLeaveKefuSession

@implementation CLeaveKefuSession

@dynamic sessionId;

typedef struct CLeaveKefuSession__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sessionId;
} CLeaveKefuSession__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CLeaveKefuSession_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CLeaveKefuSession__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CLeaveKefuSession class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CLeaveKefuSession__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CKefuQueueInfo

@implementation CKefuQueueInfo

@dynamic sessionId;

typedef struct CKefuQueueInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sessionId;
} CKefuQueueInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CKefuQueueInfo_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CKefuQueueInfo__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CKefuQueueInfo class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CKefuQueueInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SKefuQueueInfo

@implementation SKefuQueueInfo

@dynamic sessionId;
@dynamic queueNum;

typedef struct SKefuQueueInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t queueNum;
  uint64_t sessionId;
} SKefuQueueInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = SKefuQueueInfo_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SKefuQueueInfo__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "queueNum",
        .dataTypeSpecific.className = NULL,
        .number = SKefuQueueInfo_FieldNumber_QueueNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SKefuQueueInfo__storage_, queueNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SKefuQueueInfo class]
                                     rootClass:[MsgRoot class]
                                          file:MsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SKefuQueueInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
